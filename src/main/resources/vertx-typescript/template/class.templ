@includeNamed{'/vertx-java/template/common-lib.templ'}

@code{
  def renderLinkToHtml(link) {
    return null;
  }
}

@comment{"Generate the module name of a type"}
@comment{"=================================="}

@code{
  def genModulePath(moduleType) {
    String sn = helper.convertCamelCaseToUnderscores(moduleType.raw.simpleName);
    if (!type.raw.moduleName.equals(moduleType.raw.moduleName)) {
      sn = "../" + moduleType.raw.moduleName + "-js/" + sn;
    } else {
      sn = "./" + sn;
    }
    return sn;
  }
}


@comment{"Generate the TypeScript type of a type"}
@comment{"======================================"}

@code{
  def genSimpleName(type) {
    return genSimpleNameFromName(type, type.raw.simpleName);
  }

  def genSimpleNameFromName(type, simpleName) {
    if (type.raw.moduleName != null && type.raw.moduleName.equals("vertx-shell") &&
        simpleName.equals("Session")) {
      return "ShellSession";
    }
    return simpleName;
  }

  def genTSType(type) {
    if (type.kind == CLASS_STRING) {
      return 'string';
    } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE) {
      if (type.simpleName == 'boolean' || type.simpleName == 'Boolean') {
        return 'boolean';
      } else if (type.simpleName == 'char' || type.simpleName == 'Character') {
        return 'string';
      } else {
        return 'number';
      }
    } else if (type.kind == CLASS_JSON_OBJECT) {
      return 'any';
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return type.simpleName;
    } else if (type.kind == CLASS_JSON_ARRAY) {
      return 'any[]';
    } else if (type.kind == CLASS_ENUM) {
      return 'any';
    } else if (type.kind == CLASS_API) {
      return genSimpleName(type);
    } else if (type.kind.collection) {
      return 'Array<' + genTSType(type.args[0]) + '>';
    } else if (type.kind == CLASS_MAP) {
      return 'any';
    } else if (type.kind == CLASS_OBJECT) {
      return 'any';
    } else if (type.kind == CLASS_HANDLER) {
      if (type.args[0].kind == CLASS_ASYNC_RESULT) {
        return '(res: ' + genTSType(type.args[0].args[0]) + ', err?: Throwable) => void';
      } else {
        return '(e: ' + genTSType(type.args[0]) + ') => void';
      }
    } else if (type.name.equals('void') || type.kind == CLASS_VOID) {
      return 'void';
    } else {
      return genSimpleName(type);
    }
  }

  def cleanParamName(name) {
    if(name == 'arguments'){
      return 'args';
    }else{
      return name;
    }
  }
}

@comment{"Generate a method"}
@comment{"================="}

@declare{'genMethod'}
@if{method.staticMethod == static}
@if{method.doc != null}  /**\n
@{renderDocToHtml("   *", method.doc, renderLinkToHtml)}
   */\n@end{}
  @{method.name}(@foreach{param: method.params}@{cleanParamName(param.name)}: @{genTSType(param.type)}@end{", "}): @{genTSType(method.returnType)};\n\n
@end{}
@end{}


@comment{"Generate interface"}
@comment{"=================="}
@if{type.raw.moduleName.equals("vertx")}
/// <reference path="./globals.d.ts" />\n
@else{}
/// <reference path="../vertx-js/globals.d.ts" />\n
@end{}
@foreach{referencedType : referencedTypes}
/// <reference path="@{genModulePath(referencedType)}" />\n
@end{}
\n

declare module "@{type.raw.moduleName}-js/@{helper.convertCamelCaseToUnderscores(type.raw.simpleName)}" {\n
  export = @{genSimpleNameFromName(type, ifaceSimpleName)};\n
}\n

@if{doc != null}
\n/**\n
@{renderDocToHtml(" *", doc, renderLinkToHtml)}
 */@end{}
\ndeclare interface @{genSimpleNameFromName(type, ifaceSimpleName)}

@if{concreteSuperType != null}
 extends @{genTSType(concreteSuperType)}
@end{}

@if{abstractSuperTypes.size() > 0}
 extends
@foreach{abstractSuperType: abstractSuperTypes}
 @{genTSType(abstractSuperType)}
@end{','}
@end{}

@comment{"TODO handle this!!"}
@comment{
@if{handlerSuperType != null}
  @if{abstractSuperTypes.empty}
    extends
  @else{}
    ,
  @end{}
  Handler
@end{}
}

 {\n\n
@foreach{method:methods}
@includeNamed{'genMethod';static=false}
@end{}
}\n\n

@comment{"Check if there are static methods"}
@code{hasStaticMethods = false}
@foreach{method:methods}
@if{method.staticMethod}@code{hasStaticMethods = true}@end{}
@end{}

declare var @{genSimpleNameFromName(type, ifaceSimpleName)}: {\n\n

@if{hasStaticMethods}
@foreach{method:methods}
@includeNamed{'genMethod';static=true}
@end{}
@end{}

}
